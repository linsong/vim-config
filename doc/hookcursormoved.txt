*hookcursormoved.txt*  Call functions when the cursor position changed
                       Author: Thomas Link, micathom at gmail com

This experimental plugin provides some help with the definition of 
functions that should be called when the cursor position changed.

When the cursor position changes, it first checks if a certain condition 
is met and then calls functions registered in 
[bg]:hookcursormoved_{CONDITION} (an array).

Pre-defined conditions:
    linechange
        The line-number has changed.
    parenthesis
        Cursor is over (), [], or {}.
    syntaxchange
        The syntax group under the cursor has changed (i.e. the cursor 
        has moved in/out of a syntax group.
    syntaxleave
        b:hookcursormoved_syntax (ARRAY) should contain the syntax names 
        which should run the hook code.
    syntaxleave_oneline
        Same as a above but check also for changes of the line number.

In order to define a new conditions, you have to define a function 
"HookCursorMoved_{CONDITION}(mode)", which returns true if the condition 
is met.

Functions are best registered using |hookcursormoved#Register()|.
Example: >

    function! WhatsGoingOn(mode) "{{{3
        if mode == 'i'
            DoThis
        elseif mode == 'n'
            DoThat
        endif
    endf

    call hookcursormoved#Register('syntaxchange', function('WhatsGoingOn'))



-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball (vimscript 
#1502) installed.

This script requires tlib (vimscript #1863) to be installed.

Suggested maps (to be set in ~/.vimrc): >
    <+TEXT+>


------------------------------------------------------------------------
Contents~

    autoload/hookcursormoved.vim
        hookcursormoved#Enable ..................... |hookcursormoved#Enable()|
        hookcursormoved#Register ................... |hookcursormoved#Register()|
        hookcursormoved#Test_linechange ............ |hookcursormoved#Test_linechange()|
        hookcursormoved#Test_parenthesis ........... |hookcursormoved#Test_parenthesis()|
        hookcursormoved#Test_syntaxchange .......... |hookcursormoved#Test_syntaxchange()|
        hookcursormoved#Test_syntaxleave ........... |hookcursormoved#Test_syntaxleave()|
        hookcursormoved#Test_syntaxleave_oneline ... |hookcursormoved#Test_syntaxleave_oneline()|


------------------------------------------------------------------------
autoload/hookcursormoved.vim~

                                                    *hookcursormoved#Enable()*
hookcursormoved#Enable(condition)

                                                    *hookcursormoved#Register()*
hookcursormoved#Register(condition, fn)

                                                    *hookcursormoved#Test_linechange()*
hookcursormoved#Test_linechange(mode)

                                                    *hookcursormoved#Test_parenthesis()*
hookcursormoved#Test_parenthesis(mode)

                                                    *hookcursormoved#Test_syntaxchange()*
hookcursormoved#Test_syntaxchange(mode)

                                                    *hookcursormoved#Test_syntaxleave()*
hookcursormoved#Test_syntaxleave(mode)

                                                    *hookcursormoved#Test_syntaxleave_oneline()*
hookcursormoved#Test_syntaxleave_oneline(mode)


