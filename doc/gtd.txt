*gtd.txt*	PyGTK Quick Help

Author: Michael M. Tung <mtung@mat.upv.es>
        (and Keith Martin's <keith@96db.com> PyGTD documentation)
For Vim version 6.0 and above
Last change: October 30, 2006

1. Overview                                     |gtd-about|
2. Comments                                     |gtd-comments|
3. Status-Line Help                             |gtd-status-line|
4. New Features                                 |gtd-new-features|

==============================================================================
                                                *gtd-about*
1. Overview~

PyGTD is  a simple  Getting Things  Done (GTD) system  based on  David Allen's
personal-productivity  book  and  Stephen  Covey's  'Seven  Habits  of  Highly
Effective People'. It is implemented as Python script written by Keith Martin.
The goal is to easily organize and prioritize your todo lists.

For a  detailed description  of the  PyGTD program, please  refer to  the HTML
documentation included or the  author's website: http://96db.com/pyGTD/.  Note
that if you update  the Python script from this site, you  will need to change
the default file extension from .txt to .gtd in the program code.

==============================================================================
                                                *gtd-comments*
2. Comments~

Once the context text files are created, the external command|gtd| or |gtp.py|
parses all subdirectories for *.gtd files and then creates a list named
|todo.gtd|:

|:!gtd|          calls the external gtd program

A handy macro (to be included somewhere in the|.vimrc|configuration file) maps
this command to the keystrokes |,gtd|: >

 map ,gtd :!gtd %<C-M>:e<C-M><C-M>
<
For convenience, I am using PyGTD in the Mutt email client and define
>
 macro index \ch "!vim ~/GTD/todo.gtd\n" "start GTD"
 macro pager \ch "!vim ~/GTD/todo.gtd\n" "start GTD"
<
in the |muttrc|file so that <CTRL>h directly launches the program. My standard
GTD repository is $HOME/GTD.

The automatically-generated todo.gtd file contains entries of the form:

 4.96 1:00 Exercise
	   C=0 P=6 I=5 U=4 T=1H D=2004-11-24 R=1D ID=14
	   Row
	   [Stay fit]
	   [./RecurringTasks.txt]

Note that if you double-click with your mouse on the context file (here e.g.
[./RecurringTasks.txt]), this file will be opened for editing in a new buffer.

In the previous example for the todo.gtd file, the different entries stand for:

 4.96	  Priority: a derived index that is a measure of the time to
	  complete the tast, the importance, the urgency and any deadline
	  specified. Modifying this field will have no effect.

 1:00	  Time required to complete the Next Action in hours:minutes or hours.
	  To modify this field, change the 'T=' portion of the status line.

 Exercise  The title of the Next Action.

 C=0 P=6 [...]	Status line: you can modify all fields here (except ID and P),
		and the changes will be propagated back to the individual
		Context list files. P={1,2,3,4,5,6}

 Row	 	Notes associated with the next action.

 [Stay fit]	Title of parent task, if one exists.

 [./RecurringTasks.txt]	File name of the Context list. Changes to this entry
			will be reflected back to that file. This allows you
			to tell the difference between Next Actions that have
			identical titles but different contexts, such as doing
			the same thing for several different clients/projects.

NOTE: If all files have the default GTD extension *.gtd, syntax highlighting
is automatically launched, provided that ftdetect/gtd.vim and syntax/gtd.vim
have been copied to their standard locations (see|:filetype|and |:syntax|).

==============================================================================
                                                *gtd-status-line*
3. Status-Line Help~

The context file typically includes the following elements:

 *	An asterisk at the start of a line indicates this is a new task/subtask
	that can be completed in any order	

|n.|	A line starting with a number followed by "." is a subtask that needs
 	to be completed in a specific order. The lower number tasks 'block' the
	higher numbered tasks.	

|title|		A * or n. is followed by the brief description or title of the
 		task or project.	

|status|line|	C=0 I=5 U=4 T=1H D=2004-11-08 S=0D R=2004-11-01+1W ID=1


Status line may contain the following parameters:

*C=n*	Percent complete, where n is a number between 0 and 100.

*I={1,2,3,4,5}*	Importance (a 5 is a task that is crucial to your life or
 		livelihood; a 1 might be nice to do someday).

*U={1,2,3,4,5}*	Urgency on a logarithmic scale (5=today, 4=this week,
 		3=this month, 2=this quarter, 1=this year).

*T=\d+[MHDW]*	Time required in minutes, hours, days, or weeks. By default,
 		days are counted as 8 hours, weeks at 40 hours (you can
		override both of these values by changing constants in the
		script). Examples: T=10H (ten hours), T=3W (three weeks, or
		120 hours).

*R=(YYYY-MM-DD\+)?\d+[DWMY]*	Recurrence, either on a fixed schedule (if the
 				date is specified), or from time of completion
				(if not), in days, weeks, months, or years.

		Examples: 
		1904-06-16+1Y - Every year on Bloomsday
		2004-11-29+1W - Every Monday, starting November 29th, 2004
		3D - The due date resets to three days later each time the
		     task is completed.
		1M - The due date resets to 30.42 days later each time the
		     task is completed (365 days/12 months ~= 30 days).

*S=\d+[DWMY]*	Startup time -- time in advance of due date where this task
 		will start showing up in the todo list, in days, weeks, months
		or years.

*D=YYYY-MM-DD*	Due date.

*ID=n*		The id for the note. PyGTD will assign this automatically.
 		If you choose to assign ids yourself, be sure that no two
		tasks in the same Context File have the same id.

==============================================================================
                                                *gtd-new-features*
4. New Features~

Keith Martin added a bunch of new features to pyGTD:

Contexts
--------
In the status line  of a task, you can now tell  pyGTD the appropriate context
for  that task. For  example,  use "L=@Work"  (L stands  for  Location --  I'm
running  out of  good abbreviations)  to tell  pyGTD that  the task  should be
done  at work. You  can  specify  multiple contexts  by  separating them  with
commas. Contexts  are  inherited by  subtasks  unless  you override  them. The
default  context  is  the  empty  string  (""),  and  context  names  are  not
case-sensitive.

In addition, you can now use -c or --context in the command line to tell pyGTD
which contexts to include in  the todo list you're generating. Again, multiple
contexts can  be provided, separated by  commas. If you want to  include tasks
with no specified context,  include an extra comma at the  beginning or end of
your context list (e.g., "-c,@Work").

Start date
----------
In addition  to being able  to specify a lead  time for a  task (e.g., "S=3D")
in  the  status  line,  you  can  also specify  a  specific  start  date  with
"S=yyyy-mm-dd". I use this all the time as an electronic "tickler file".

Adding new subtasks in the todo list
------------------------------------
You can add new  subtasks to a task in your todo list  by typing them directly
into the  notes field for  that task. When you run  pyGTD, they will  be added
back into the appropriate project file, and the new tasks will show up in your
todo list as appropriate.

Prerequisites
-------------
You  can now  specify  prerequisite  tasks that  must  be  completed before  a
particular task will  appear in the todo list. Prerequisites  are specified by
the ID of the prerequisite task (e.g., "PRE=3,4" means that tasks 3 and 4 must
be  complete  before the  specified  task  will  become  active), and  if  the
prerequisite is  in a  different project file,  the syntax  is path/to/file|ID
(e.g., "PRE=c:/gtd/projects/gtd.txt|5"). I try  hard not to use  this feature,
but some people find it indispensible.

Make edits in either the todo or the project file
-------------------------------------------------

You'll notice that  a four digit hex number  is added as a CRC  to each status
line (e.g., "CRC=2A43"). This  enables you  to make changes  to your  tasks in
either the project file or in the todo  list, and pyGTD can tell which one has
changed.

Project comments
----------------
Any lines  of text  at the top  of a  project file before  the first  task are
treated as comments, and  they are preserved. This is a good  place to write a
quick note to yourself about the goal of the project, and how you'll know when
you're done.

Process multiple todo lists at once
-----------------------------------
Currently if you use the command-line  interface to pyGTD, you must call pyGTD
once  for  every  todo  list  you  want  to  generate  (e.g.,  once  for  each
context). As an advanced  user feature, I've added an interface  to the todo()
function in  gtd.py that  allows you to  generate all your  todo lists  in one
pass, which  is a lot  faster. I'm planning  to write a  post about how  I use
pyGTD to implement Getting Things Done, so  if you wait for that, more details
will be provided.

==============================================================================
vim:textwidth=78:tabstop=8:noexpandtab:filetype=help
