*TagsParser.txt*	Vim TagsParser Plugin		June 11, 2006

Author: A. Aaron Cornelius 

To contact you can email me at <ADotAaronDotCorneliusAtgmailDotcom> if you
deobfuscate my address.

==============================================================================
Copyright (C) 2006 A. Aaron Cornelius

This program is free software; you can redistribute it and/or
modify it under The terms of The GNU General Public License
as published by The Free Software Foundation; either version 2
of The License, or (at your option) any later version.

This program is distributed in The hope that it will be useful,
but WITHOUT ANY WARRANTY; without even The implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See The
GNU General Public License for more details.

You should have received a copy of The GNU General Public License
along with this program; if not, write to The Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
USA.

==============================================================================
0. TagsParser Overview			*tagsparser*

This plugin has two uses, management of dynamic tags files and display of tags
for an open file.  The use and configuration of these two features is
described in detail below.

1.  Tags Parser Installation		|tagsparser-install|
2.  Tags Parser Global Configuration	|tagsparser-config|
3.  Tags Parser Global Commands		|tagsparser-commands|
4.  Dynamic Tags Overview		|tagsparser-dynamictags|
5.  Dynamic Tags Usage			|tagsparser-dynamictags-usage|
6.  Dynamic Tags Configuration		|tagsparser-dynamictags-config|
7.  Dynamic Tags Commands		|tagsparser-dynamictags-commands|
8.  Tag Window Overview			|tagsparser-tagwindow|
9.  Tag Window Usage			|tagsparser-tagwindow-usage|
10. Tag Window Configuration		|tagsparser-tagwindow-config|
11. Tag Window Commands			|tagsparser-tagwindow-commands|
12. Depreciated Options			|tagsparser-depreciated-options|
13. Known Issues			|tagsparser-issues|
14. Changelog				|tagsparser-changelog|
15. Todo list				|tagsparser-todo|

==============================================================================
1. Tags Parser Installation		*tagsparser-install*

To install this plugin you simply need to ungzip and untar the contents of
the downloaded tarball into a directory that is located somewhere in your
|runtimepath|.  This is usually one of $HOME/.vim, $HOME/vimfiles,
$VIM/vimfiles, or $VIMRUNTIME.

If you are using Vim 7, and have downloaded the |vimball| file instead of the 
tarball file, simply source the vimball and it should install the plugin files 
for you.

To enable this documentation to be accessible via :help, run
:helptags <install_dir>/doc where the <install_dir> would be the directory
where you expanded the tarball.

					*tagsparser-install-more*
In addition to the TagsParser.vim file, you will need three other things to
enable this plugin to work properly.  You will need to have Perl installed,
Exuberant Ctags (http://ctags.sourceforge.net/).

Once these are installed you will need to ensure that the plugin can find the
ctags executable.  One way to do this is simply make sure your path is setup 
properly.  Otherwise you can specify these using the |TagsParserTagsProgram| 
global variable.

If you would like to enable Ada support for ctags (and this plugin), there is a
file included with this plugin which will enable Ada tags support in ctags.
The details of this are in the |tagsparser-ada-support| section, near the
|tagsparser-tagswindow-languages| section.

					*tagsparser-Perl-warning*
You need all three of these programs installed to use any feature of this
plugin.  If any one of them is not found the plugin will not load and it will
inform you of this fact.  If you have multiple versions of VIM using the same
.vimrc/runtimepath, you can force VIM to not complain about Perl not being
enabled at startup using the |TagsParserNoPerlWarning| global variable.

==============================================================================
2. Tags Parser Global Configuration	*tagsparser-config*

					*tagsparsertagsprogram*
TagsParserTagsProgram	The location of the Exuberant ctags program.  If this
			is not hardcoded the TagsParser plugin will attempt to
			find the proper find program, it may not succeed, but
			it is more likely to succeed than the find program
			automatic search.  This is because there is no windows
			component called "ctags" like there is for "find".  It
			is set like: >
	let g:TagsParserTagsProgram = "C:/cygwin/usr/local/bin/ctags"
<

TagsParserNoPerlWarning			*tagsparsernoperlwarning*
			This is an option you can set if you have the
			TagsParser plugin installed in your |runtimepath| but
			some versions of VIM that you may launch don't have
			Perl support compiled in.  This option being set to 1
			will prevent the TagsParser from complaining when the
			non-Perl supported VIM starts up.  This is usually only
			useful on a combined WIN32/Cygwin VIM setup. >
	let g:TagsParserNoPerlWarning = 1
<
					*tagsparseroff*
TagsParserOff		This option will let you disable all TagsParser 
			functionality so that upon initialization nothing is 
			done automatically.  When the plugin is off the tag 
			window cannot be opened, tags files will not be saved, 
			and you will not be able to tag a directory using the
			|:TagDir| command.  Non-tag related functions and 
			activities such as the |tagsparser-tagwindow-quickfix|
			commands and the |TagsParserLastPositionJump| will not 
			be affected and are still enabled.  The same affect 
			can be done on the fly using the |:TagsParserOff| 
			command. >
	let g:TagsParserOff = 1
<
TagsParserDisableLang_{filetype}	*tagsparserdisablelang_{filetype}*
			This option will let you prevent a language which is 
			currently supported by the TagsParser plugin from 
			being tagged or recognized by the plugin.  The 
			{filetype} option must be in the form that VIM 
			recognizes the filetype as.  So to disable C++ support 
			you would have to disable it like so: >
	let g:TagsParserDisableLang_cpp = 1
<
			Because "cpp" is the way that VIM sets the filetype 
			for C++ files.  This is usually not a big deal, except 
			for languages which ctags uses non-alphabetic 
			characters in the name of the language.  The only 
			languages that this is an issue for (at the moment) 
			are C++ (cpp) and C# (cs).  These language strings are 
			listed in the |tagsparser-language-table| section.  
			There are no default values for this class of 
			variables.

TagsParserLastPositionJump		*tagsparserlastpositionjump*
			This is a handy feature to enable, what it will do is 
			everytime you open up VIM, if you keep a viminfo file, 
			the cursor will jump to the last line and column the 
			cursor was at when you exited the file.  Additionally, 
			if you are editing multiple buffers, this will cause 
			the cursor to be placed at the same exact place in the 
			buffer as you were before exiting the buffer.  If this 
			is enabled, along with the 
			|TagsParserHighlightCurrentTag| option, it will cause 
			the correct tag to be highlighted immediately upon 
			entering the buffer (assuming that the tag window is 
			open, and a valid tag file exists for the file being 
			edited in the buffer).  To read more about this refer 
			to |last-position-jump| or |line()|.  The default 
			value for this flag is 0. >
	let g:TagsParserLastPositionJump = 0
<
==============================================================================
3. Tags Parser Global Commands		*tagsparser-commands*

					*:tagsparseroff*
:TagsParserOff		This command can be used to turn off all TagsParser
			behavior after VIM is started and the plugin has been
			installed.  When the plugin is off the tag window
			cannot be opened, tags files will not be saved, and
			you will not be able to tag a directory using the
			|:TagDir| command.  Non-tag related functions and 
			activities such as the |tagsparser-tagwindow-quickfix| 
			commands and the |TagsParserLastPositionJump| will not 
			be affected and are still enabled.  This works the 
			same way as the |TagsParserOff| configuration 
			variable.

					*<leader>tof*
<leader>tof		This is the default mapping installed which will call
			the |:TagsParserOff| command.

					*:tagsparseron*
:TagsParserOn		This command can be used to turn on all TagsParser
			behavior after VIM is started and the plugin has been
			installed, but the plugin has also been turned off.
			This can be either by the |:TagsParserOff| command or
			via the |TagsParserOff| configuration variable.  This
			re-enables all TagsParser functionality as described in
			this help file.

					*<leader>ton*
<leader>ton		This is the default mapping installed which will call
			the |:TagsParserOn| command.


==============================================================================
4. Dynamic Tags Overview		*tagsparser-dynamictags*

The dynamic tags portion of the TagsParser plugin was created to enable a
directory to be specified as a project directory, using the 
|TagsParserTagsPath| variable, and every file in that directory will be tagged 
dynamically.  So as soon as you save a file the tags for that file will be 
updated or created depending on whether the tag file existed or not.

This way the normal VIM tag search feature |tags-and-searches| will be able to
be used while always having up-to-date tags.  You can also specify static tag
files utilizing the standard |tags-option|.  This can be used to specify a set
of tags that you would like to reference but will not be changing very often
(if at all).

In this way you can have your project files updated as you change them, but
any supporting code, such as an OS, can still be referenced.  Since the tags
which change the least often can just be in 1 file as opposed to the many that
will be created for the project directory, it will reduce the overhead of
searching those files.

					*tagsparser-dynamictags-languages*
The dynamic tags portion of the TagsParser plugin supports all languages that
Exuberant Ctags supports.  If you have added your own languages in a format
that VIM can understand, the TagsParser should support any additions.

As mentioned in the |tagsparser-install-more| and
|tagsparser-tagswindow-languages| sections, there is more information about
Ada support in the |tagsparser-ada-support| section.

==============================================================================
5. Dynamic Tags Usage			*tagsparser-dynamictags-usage*

After you have properly installed the TagsParser plugin and any supporting
programs you are ready to use the dynamic tag functionality of the TagsParser.
To use the dynamic tags, the only thing you need to do is setup your project
directories using the |TagsParserTagsPath| global variable.  Once this is 
done, every file you save that is under that path (and meets any exclude or 
include criteria, more on that in a second) will automatically create or update 
a tag file.  If that tag file did not exist before now, it will be added to the
regular VIM |tags-option| so tag searching via the normal methods (|tag|, |ts|,
|<CTRL-]>|, |<CTRL-T>|, etc.) are supported.

If you would like to setup some sort of standard "library" type tags file with 
the same options as the TagsParser plugin uses to tag files, this is an 
example (aside from any user or language specific options that the you may 
enable via your .vimrc), of the options that TagsParser enables when it 
processes files. >
	ctags -f <full_path_tag_file> --format=2 <g:TagsParserCtagsOptions> 
	<g:TagsParserCtagsOptions_{filetype}> --excmd=p --fields=+nS \
	--sort=yes --tag-relative=yes <full_path_source_file>
<
					*tagsparser-ctags-spaces*
There is a problem I have found with ctags when it is compiled to use an 
external sort function.  When specifying a tag file, which has spaces in the 
file name or path name, and the sort option is on, Exuberant Ctags will 
produce an error.  This is because the tag file name to be sorted is not 
passed to the external sort program quoted.  If the TagsParser plugin produces 
errors when saving files or running the |TagDir| command this is likely the 
cause.

There are three ways to fix this problem:
1) Don't use spaces in file or directory names (obviously this is not the best 
'solution').
2) Fix the Exuberant Ctags source so that all filenames are passed to the sort 
program quoted.  This is more work, but has the benefit of using less memory 
and being faster than the Ctags internal sort.
3) Use Ctags internal sort.  This is the easiest option.  To use the internal 
Ctags sort algorithm, you must recompile the ctags program when supplying 
--disable-external-sort during the configure step.

					*tagsparser-include-exclude-usage*
You can automatically include or exclude files or directories under the tag
path by using these options: |TagsParserDirExcludePattern|,
|TagsParserFileExcludePattern|, |TagsParserDirIncludePattern|, and
|TagsParserFileIncludePattern|.  If an option is defined as empty ("") it is
considered disabled.  The exclude pattern is searched first so if you have
both include and exclude patterns defined, it will allow you to define an
exception to a standard include rule.  By default the include patterns are
left empty (""), and the exclude patterns are set to exclude some standard
types of temporary directories and files.

Directories:	.* (such as .vim)
		_* (such as _vim)
		tmp, TMP
		temp, TEMP
		backup, BACKUP

Files (case insensitive):
		*.o	(object file)
		*.obj	(object file)
		*.a	(static library file)
		*.so	(dynamic library file)
		*.d	(typical dependency file)
		*.bak	(typical backup file)
		*.swp	(swap file)
		*~	(Vim backup file)
		core	(core file from program crash)
		tags	(tag file)
		*.tags	(file specific tag file)
		*.txt	(text document)
		*.ali	(GNAT link information file)
		*.da	(GCOV data file)
		*.bb	(GCOV basic block file)
		*.bbg	(GCOV basic block file)
		*.gcov	(GCOV results file)

Previous versions of the TagsParser plugin utilized Perl-style regular 
expressions.  This is no longer the case, all include and exclude patterns 
utilize Vim-style regular expressions.

==============================================================================
6. Dynamic Tags Configuration		*tagsparser-dynamictags-config*

					*tagsparsertagspath*
TagsParserTagsPath	This is the option that defines the project
			directories.  These can be defined in any way that
			makes sense for your platform.  Special directory
			characters such as ~ are allowed.  This uses Vim path 
			characters so you can use ** to define subdirectory 
			searching along with other options.  See |path| for 
			more information, be sure to enclose your path in 
			quotes. Here are some examples:
			
			All directories under C:/Working and all files only in 
			the user's test directory: >
	let g:TagsParserTagsPath = "C:/Working/**,~/test"
<
			All directories named 'src' and 'inc' under 
			/vob/project: >
	let g:TagsParserTagsPath = "/vob/project/**/src,/vob/project/**/inc"
<
			Any directory 2 or less directories deep past /work: >
	let g:TagsParserTagsPath = "/work/**2/"
<
			If there are too many files or subdirectories defined 
			in this way, it may slow down tag searching.  To avoid 
			this make extensive use of the special vim characters 
			such as **, **[0-255], *, etc.

					*tagsparserctagsoptions*
TagsParserCtagsOptions	This option can be used to enable or disable global 
			Ctags functionality.  This could be something like 
			disabling the inclusion of file-scoped tags: >
	let g:TagsParserCtagsOptions = "--file-scope=no"
<
			Or disabling ctags from following symbolic links: >
	let g:TagsparserCtagsOptions = "--links=no"
<
			There are some options that are enabled by default to 
			aid the TagsParser plugin and these should not be 
			turned off, some won't matter to the behavior of the 
			TagsParser (such as "--sort=yes", it would make tag 
			searching by VIM slower though).  And some will make 
			a difference (such as "--fields=+nS", disabling either 
			option would break some or all of the TagsParser 
			functionality).  However, even if you include some of 
			these in your g:TagsParserCtagsOptions settings by 
			accident it should not make a difference since the 
			hard coded values are processed after the user 
			options.  The default for this option is empty. >
	let g:TagsParserCtagsOptions = ""
<

TagsParserCtagsOptions_{filetype}	*tagsparserctagsoptions_{filetype}*
			This option can be used to enable or disable filetype 
			specific Ctags functionality.  For example, if you 
			wanted to enable all types for C/C++ files (function 
			prototypes, external variables and local variables are 
			turned off by default), that could be done like this: >
	let g:TagsParserCtagsOptions_c = "--c-kinds=+pxl"
	let g:TagsParserCtagsOptions_cpp = "--c++-kinds=+pxl"
<
			Or, to turn on all Ada type processing: >
	let g:TagParserCtagsOptions_ada = "--ada-kinds=+PTUVRKOEay"
<
			Keep in mind, that disabling some types for languages 
			which have extended support may prevent some types 
			from being listed in the Tag Window.  If a type is not 
			displayed because it's "parent" type is disabled, it 
			will still be in the tag file and still be able to be 
			located using regular VIM tag commands (see |tags| or 
			|tagsparser-dynamictags-usage| for details about 
			regular VIM tag commands).  So if you disable the 
			tagging of C/C++ structures: >
	let g:TagsParserCtagsOptions_c = "--c-kinds=-s"
<
			Then you will not be able to see any member tags ("m") 
			that belong to any structures as long as nested tag 
			display is enabled (which is the default).  Refer to 
			|TagsParserNoNestedTags| for more information on how 
			to disable nested tag display.

			This option can also be useful where ctags won't 
			automatically recognize a file as the proper type but 
			VIM does.  By default, ctags does not recognize *.mk 
			files as Makefiles, but VIM does.  So one quick way to 
			make sure that your *.mk files get tagged properly is 
			to do this: >
	let g:TagsParserCtagsOptions_make = "--language-force=make"
<
			(Of course, you could just create a .ctags file in 
			your home directory and add this line to it: 
			'--langmap=make:.mk'.  But what fun would that be).

			There are no default values for this class of 
			variables.

TagsParserDirExcludePattern		*tagsparserdirexcludepattern*
			The default behavior of this is described in
			|tagsparser-include-exclude-usage|.  The default
			definition of this variable is: >
	let g:TagsParserDirExcludePattern =
		\ '.\+/\..\+\|.\+/_.\+\|\%(\ctmp\)\|' .
		\ '\%(\ctemp\)\|\%(\cbackup\)'
<

TagsParserFileExcludePattern		*tagsparserfileexcludepattern*
			The default behavior of this is described in
			|tagsparser-include-exclude-usage|.  The default
			definition of this variable is: >
	let g:TagsParserFileExcludePattern = 
		\ '^.*\.\%(\co\)$\|^.*\.\%(\cobj\)$\|' .
		\ '^.*\.\%(\ca\)$\|^.*\.\%(\cso\)$\|^.*\.\%(\cd\)$\|' .
		\ '^.*\.\%(\cbak\)$\|^.*\.\%(\cswp\)$\|^.\+\~$\|' .
		\ '^\%(\ccore\)$\|^\%(\ctags\)$\|^.*\.\%(\ctags\)$\|' .
		\ '^.*\.\%(\ctxt\)$\|^.*\.\%(\cali\)$\|^.*\.\%(\cda\)$\|' .
		\ '^.*\.\%(\cbb\)$\|^.*\.\%(\cbbg\)$\|^.*\.\%(\cgcov\)$'
<

TagsParserDirIncludePattern		*tagsparserdirincludepattern*
			The default behavior of this is described in
			|tagsparser-include-exclude-usage|.  The default
			definition of this variable is: >
	let g:TagsParserDirIncludePattern = ""
<
			So by default this option is considered disabled.

TagsParserFileIncludePattern		*tagsparserfileincludepattern*
			The default behavior of this is described in
			|tagsparser-include-exclude-usage|.  The default
			definition of this variable is: >
	let g:TagsParserFileIncludePattern = ""
<
			So by default this option is considered disabled.

==============================================================================
7. Dynamic Tags Commands		*tagsparser-dynamictags-commands*

					*:tagdir*
:TagDir {dir}		This command will take a directory and create a tag
			file for every file file under that directory taking
			into consideration any include and exclude criteria
			(|tagsparser-include-exclude-usage|).  The command
			will do directory name completion for you.  This can
			be used to get an initial set of tags for your project
			directory, or pretty much however you want.  The
			directory you specify with this command does _not_ need
			to be located within the |TagsParserTagsPath| for the 
			command to work.

==============================================================================
8. Tag Window Overview			*tagsparser-tagwindow*

The tag window can be used to view a list of the tags that belong to the file
which is open.  It will sort them hierarchically based on the type that ctags
uses.  Fold markers are used so the file, types or tags with members can all
be folded.  If a tag type is defined as having a "member" the TagsParser can
display things this way.  For example, if struct foo is defined in foo.c: >

	struct foo
	{
	    int bar;
	};
<
The following tags would be created (using the options that I use in the
TagsParser). >

	foo	foo.c	/^struct foo$/;"	s	line:1
	bar	foo.c	/^    int bark;/;"	m	line:3	struct:foo
<
So you can see that it is easy to know that struct memeber bar belongs to
struct foo.  This information is used so that all structures are displayed
under the structure they belong to.

If you are using Exuberant Ctags 5.5.4, it has support for tagging local
variables in functions, and this is supported by TagsParser.  Local variables
are not tagged by default however, so you will have to enable this via the
|TagsParserCtagsOptions_{filetype}| configuration variable.

Currently only Ada and C/H/C++ files have extended support built in to the
TagsParser plugin.  This is mostly because I am familar with the lanugage and
how ctags creates the tags file for the Ada and C/H/C++ languages.  See
|tagsparser-tagwindow-languages| for more information.

					*tagsparser-tagwindow-languages*
The Tag Window portion of the TagsParser currently supports all languages that
the basic Exuberant Ctags 5.5.4 supports, along with Ada.  It is simple to
add baisc support to the TagsParser plugin.  If you want a more complicated
language support added, such as hierarchical and member type support it should
also be mostly straight forward to do, but it isn't quite as simple.  I am
happy to help with any requests for hierarchical language support also because
I feel like this is where the TagsParser plugin is most useful.  The 'H' 
language isn't really a seperate language, but some people add it as 
a seperate type.  So if you have an 'H' language type added with your VIM 
setup then the TagsParser will recognize it as a c/c++ file.  Here is the list 
of currently supported lanuages, and what modes they are supported in.  Some 
types supported by Ctags do not appear to have a direct correlation with a VIM 
type.

					*tagsparser-language-table*
Language	Support			VIM filetype	Ctags type
-------------------------------------------------------------------------
Ada		extended support	ada		ada (add-on)
Assembly	basic supoort		asm		asm
Asp		basic supoort		asp		asp
Awk		basic supoort		awk		awk
Beta		basic supoort				beta
C		extended support	c		c
H		extended support			c++
C++		extended support	cpp		c++
C#		basic support		cs		c#
Cobol		basic support				cobol
Eiffel		basic support		eiffel		eiffel
Erlang		basic support		erlang		erlang
Fortran		basic support		fortran		fortran
Html		basic support		html		html
Java		basic support		java		java
Javascript	basic support		javascript	javascript
Lisp		basic support		lisp		lisp
Lua		basic support		lua		lua
Makefiles	basic support		make		make
Perl		basic support		Perl		Perl
Php		basic support		php		php
Python		basic support		python		python
Rexx		basic support		rexx		rexx
Ruby		basic support		ruby		ruby
Scheme		basic support		scheme		scheme
Sh script	basic support		sh		sh
Slang		basic support		slang		slang
Sml		basic support		sml		sml
Sql		basic support		sql		sql
Tcl		basic support		tcl		tcl
Vera		basic support				vera
Verilog		basic support		verilog		verilog
Vim script	basic support		vim		vim
Yacc		basic support		yacc		yacc

					*tagsparser-ada-support*
Ada is supported because I have added support for it to my ctags install.
This file is included with in the TagsParser tarball in the ctags directory.
To utilize this file, you must have the ctags source somewhere, place the
ada.c file into the directory where that source is located.  Lastly, compile 
and install the ctags program.  The usual way to do this is to run these 
commands in the source directory: >
	
	./configure
	make
	make install
<
The README file that comes with the ctags source contains more information
about the configuration and installation of the ctags program.

==============================================================================
9. Tag Window Usage			*tagsparser-tagwindow-usage*

The tag window is meant to be very intuitive to use.  The details of how it
operates are affected by the way you configure your options
(|tagsparser-tagwindow-config|).

					*tagsparser-tagwindow-opening*
By default the Tag Window is enabled so that whenever the |TagsParserToggle| 
command is used, or the |TagsParserAutoOpenClose| variable is set (and the 
file being edited is within the |TagsParserTagsPath|, etc.), the Tag Window 
will open.  If you wish to disable the Tag Window, you can set the 
|TagsParserNoTagWindow| variable.

a tag window is resized while it is opened, the tag window will attempt to
maintain that size if it is ever closed and re-opened during that VIM session.
When VIM is closed the tag window will revert back to it's default or
preconfigured size (if |TagsParserWindowSize| is set).

To open the tag window use |TagsParserToggle|.  The default behavior is that
the tag window will increase the size of your vim window (if possible).  The
size of the window is based on the |TagsParserWindowSize| variable.  If you do
not want this behavior set the |TagsParserNoResize| flag.

The position of the opened Tag Window defaults to a right vertical split, you 
can move it to the left side of the screen if you want though using the 
|TagsParserWindowLeft| variable.  If you prefer the window to be opened using 
a horizontal split instead of vertical, use the |TagsParserHorizontalSplit| 
option.  With that option set the Tag Window opens on the bottom of the VIM 
window by default.  If you would prefer the Tag Window to open on the bottom 
of the VIM window, set both the |TagsParserHorizontalSplit| and 
|TagsParserWindowTop| variables together.

					*tagsparser-tagwindow-contents*
Tag Nesting has a lot to do with how the Tag Window appears, if the file being 
edited is one of the filetypes that has extended support in TagsParser, it 
will be displayed with nested tags.  See |tagsparser-languages-support| for 
more information on those languages.  If you wish to disable this nesting 
behavior you can set the |TagsParserNoNestedTags| variable.

					*tagsparser-tagwindow-tagselection*
When a tag is selected It will go back to the window the file is loaded in and
go to the line of the selected tag (see |tagsparser-issues-1| for an instance
where this may not happen properly).  If the tag is currently located in a fold
then surrounding code will be unfolded.

					*tagsparser-tagwindow-folding*
About the only interaction that the window requires is that you can fold and
unfold the various hierarchies in the tag window, and you can select a tag.
The methods of folding are the same as the standard VIM folding methods (see
|folding| or |fold-methods| if you need more information).  To select a tag you
can either hit <CR> to select it, double left click on a tag, or if the
|TagsParserSingleClick| option is set when VIM is started, you can just use a
single click to select a tag.  If a tag is selected (either manually, or by the 
|TagsParserHighlightCurrentTag| option) and that tag is located within a fold,
that fold will be opened.  When a new tag is selected, that fold will be
refolded automatically.  If a fold is opened manually before a tag within that
fold is selected, then the fold will not be closed when focus is removed from
that tag.  See |TagsParserFoldLevel| for more details.  By default the fold 
column (|'foldcolumn'|) is displayed in the Tag Window.  To turn the fold 
column off use the |TagsParserFoldColumnDisabled| variable.

Also, the |TagsParserFoldHeading_{filetype}_{letter}| configuration variable 
can be used to force a heading to be folded automatically.

					*tagsparser-tagwindow-syntax*
The items in the tag window do have syntax matching by default.  The things
which are highlighted are the file name, the tags themselves, the tag types
(such as Struct, Class, etc.) and the fold markers (so you can set them to be
easy to ignore).  You can also set the colors used to highlight a selected
tag.  The syntax types which match these are: |TagsParserFileName|,
|TagsParserTag|, |TagsParserTypeName|, |TagsParserFoldMarker|,
|TagsParserHighlight|.  You can override the default highlighting for these
groups in the normal way defined in |:highlight| or |:highlight-link|.

					*tagsparser-tagwindow-quickfix*
As you may or may not know, the quickfix window opens differently based on
whether you have vertical or horizontal splits already open.  I personally
don't like my quickfix window to be vertical so there are some commands and
mappings the TagsParser plugin enables to open up a full sized window below
everything, or a single pane-sized window split below the current opened file.
The commands are |:TagsParserCBot| and |:TagsParserCBotWin| for the full-sized
window below everything, or |:TagsParserCOpen| and |:TagsParserCWindow| for
the window below only the current file.  There are also key mappings installed
for these commands, they are |<leader>tbo|, |<leader>tbw|, |<leader>to| and
|<leader>tw| respectively.

==============================================================================
10. Tag Window Configuration		*tagsparser-tagwindow-config*

					*tagsparsernotagwindow*
TagsParserNoTagWindow	This option will forceably disable the Tag Window from 
			being opened.  So if this option is set, and you 
			attempt to open the tag window it will produce an 
			error.  Setting this option is a good way to limit the 
			functionality of the TagsParser plugin to the Dynamic 
			Tag functionality. >
	let g:TagsParserNoTagWindow = 0
<
					*tagsparsernonestedtags*
TagsParserNoNestedTags	This option will prevent the tags displayed in the Tag 
			Window from being displayed in a nested fashion.  The 
			default way of displaying tags is, if the file type of 
			the file being edited (and tagged) is one of the file 
			types that has extended support (Ada, C/H/C++), it will 
			be displayed in a nested fashion.  So local variables 
			get displayed under the function they are declared in, 
			structure members get displayed under the name of the 
			struct they belong to, and so on.  The full list of 
			languages and what their level of support is defined 
			in |tagsparser-language-table|.  The default for this 
			flag is 0. >
	let g:TagsParserNoNestedTags = 0
<

					*tagsparserwindowleft*
TagsParserWindowLeft	This option will cause the Tag Window to be displayed 
			on the left side of the VIM window.  This setting only 
			matters if the |TasgParserHorizontalSplit| option is 
			off.  By default it is displayed on the right side, so 
			this flag is set to 0. >
	let g:TagsParserWindowLeft = 0
<

TagsParserHorizontalSplit		*tagsparserhorizontalsplit*
			This option will cause the Tag Window to be opened 
			using a horizontal split instead of the default 
			vertical split.  When this is set the Tag Window 
			defaults to opening on the bottom of the VIM window.  
			To force it to open on the top of the VIM window you 
			can set use the |TagsParserWindowTop| variable.  By 
			default this flag is 0. >
	let g:TagsParserHorizontalSplit = 0
<
					*tagsparserwindowtop*
TagsParserWindowTop	This option will cause the Tag Window to be displayed 
			on the top of the VIM window using a horizontal split.  
			This setting only matters if the 
			|TagsParserHorizontalSplit| option is set.  By default 
			this flag is 0. >
	let g:TagsParserWindowTop = 0
<
					*tagsparserwindowsize*
TagsParserWindowSize	The size of the tag window when it is opened.  If the
			|TagsParserNoResize| flag is set then the tag window
			will simply steal this many columns from your existing
			VIM window.  The default is 40. >
	let g:TagsParserWindowSize = 40
<
					*tagsparserwindowname*
TagsParserWindowName	The name of the tag window.  This really has not
			particular use, and there are no special options for
			it to set the window name based on the open file, but
			it is here for you to customize if you feel like.  The
			default is "__tags__". >
	let g:TagsParserWindowName = "__tags__"
<

TagsParserAutoOpenClose			*tagsparserautoopenclose*
			If this flag is set, the tag window will automatically
			open if you start editing a file that has a tag file.
			The tag file in this case must be the one which is
			automatically generated.  The default for this is 0. >
	let g:TagsParserAutoOpenClose = 0
<

TagsParserBufExplWorkAround		*tagsparserbufexplworkaround*
			If you have a buffer explorer plugin loaded, sometimes
			the existance of the tag window with the
			|TagsParserAutoOpenClose| flag being set can interfere
			with some of the automatic operations and/or closing of 
			that buffer explorer.  If you find that things are not
			working quite right you can set this option.  If this
			option is set it will effectively close the tag window
			every time you change to a different window in VIM.
			The default for this option is 0 even if the
			|TagsParserAutoOpenClose| flag is set to 1. >
	let g:TagsParserBufExplWorkAround = 0
<
					*tagsparsernoresize*
TagsParserNoResize	If you don't like the tag window increasing the size
			of your VIM window you can set this flag.  The default
			for this flag is 0. >
	let g:TagsParserNoResize = 0
<
					*tagsparsersingleclick*
TagsParserSingleClick	If this option is set a mapping will be installed
			which will allow you to select a tag with a single
			click instead of <CR> or double click as described in
			|tagsparser-tagwindow-usage|.  This mapping can
			sometimes interfere with other mappings you have set
			so it is not on by default.  The default for this flag
			is 0. >
	let g:TagsParserSingleClick = 0
<

TagsParserHighlightCurrentTag		*tagsparserhighlightcurrenttag*
			If this option is set, while the tag window is open
			the tag definition that the cursor is currently on the
			same line of will be highlighted in the tag window.
			This works fairly well, but it depends on how ctags
			defines which line the tag as being defined on.  See
			|tagsparser-issues-1| and |tagsparser-issues-2| for
			some limitations of this option. The default for this
			flag is 0. >
	let g:TagsParserHighlightCurrentTag = 0
<
					*tagsparsersorttype*
TagsParserSortType	The tags displayed in the tag window are sorted either
			in alphabetical order, or by line number.  The options
			for this are either "line" or "alpha".  The default
			for this flag is "alpha". >
	let g:TagsParserSortType = "alpha"
<
					*tagsparserfoldlevel*
TagsParserFoldLevel	The default folding method for the tag window is to
			fold all types which have members.  So instead of
			showing each struct defined in a file open with all
			members displayed, that struct will be folded.  If you
			prefer to override this default behavior you can set
			the fold level manually with this option, the values
			for this option can be any number that is valid for
			the normal |foldlevel| (although, after a while, large
			numbers stop being meaningful).  If this variable is
			left undefined in your .vimrc then the default fold
			method will be followed.  As described in
			|tagsparser-tagwindow-folding|, when a tag is
			highlighted, if it is currently hidden in a fold it
			will be unfolded.  And that fold will be refolded when
			that tag is no longer highlighted.  By default this 
			variable is undefined. >
	unlet! g:TagsParserFoldLevel
<
TagsParserFoldColumnDisabled		*tagsparserfoldcolumndisabled*
			If this option is set then the fold column will not be 
			displayed in the Tag Window.  The default this flag is 
			0. >
	let g:TagsParserFoldColumnDisabled = 0
<
TagsParserDisplaySignature		*tagsparserdisplaysignature*
			The default display of the tag window is the name of
			the tags themselves.  If you prefer to see what the
			difference between the tags is you can turn on this
			option to have the line where the tag is defined
			displayed.  The default for this flag is 0. >
	let g:TagsParserDisplaySignature = 0
<

				*tagsparserdisabletype_{filetype}_{letter}*
TagsParserDisableType_{filetype}_{letter}
			This option cause a type that has been tagged from 
			never being shown.  So if you like tagging externed 
			variables in C/C++, but don't ever want them to show 
			up in the Tag Window, you can disable that option like 
			so: >
	let g:TagsParserDisableType_cpp_x = 1
	let g:TagsParserDisableType_c_x = 1
<
			As with the other {filetype} configuration variables, 
			you must replace the {filetype} string with the string 
			VIM uses as the filetype for files of that type.  The 
			details of the lanugage strings are listed in the 
			|tagsparser-language-table| section.  The {letter} 
			option is whatever the ctags program uses for that 
			particular type.  To get a full list of what options 
			are available for a particular language use the 
			--list-kinds=c ctags option.  Here is an example: >
	$ ctags --list-kinds=c
	c  classes
	d  macro definitions
	e  enumerators (values inside an enumeration)
	f  function definitions
	g  enumeration names
	l  local variables [off]
	m  class, struct, and union members
	n  namespaces
	p  function prototypes [off]
	s  structure names
	t  typedefs
	u  union names
	v  variable definitions
	x  external variable declarations [off]
<
			There are no defaults for this class of variable.

				*tagsparserfoldheading_{filetype}_{letter}*
TagsParserFoldHeading_{filetype}_{letter}
			This option can be used to automatically fold 
			a heading by default.  See the 
			|tagsparser-tagwindow-folding| section for more 
			details on how the TagsParser plugin uses folding in 
			the Tag Window.  Similar to other {filetype} and 
			{letter} configuration variables, the {filetype} must 
			be the string VIM uses as the filetype, these are 
			listed in the |tagsparser_language-table|.  And the 
			{letter} is the letter that the ctags program uses.  
			An example of how to find this is show in the 
			|TagsParserDisableType_{filetype}_{letter}| section.  
			For example, if you wanted function prototypes in 
			C and C++ files to always be folded: >
	let g:TagsParserFoldHeading_c_p = 1
	let g:TagsParserFoldHeading_cpp_p = 1
<
			There are no default values for this class of 
			variable.

					*tagsparsertag* *tagsparsertag-syntax*
TagsParserTag		Each tag in the tag window match this syntax type.
			The default highlighting for this type matches the
			Normal highlighting group. >
	hi link TagsParserTag Normal
<
					*tagsparserfilename*
					*tagsparserfilename-syntax*
TagsParserFileName	The filename at the top of the tag window match this
			syntax type.  The default highlighting for this type
			matches the Underlined highlighting group. >
	hi link TagsParserFileName Underlined
<
					*tagsparsertypename*
					*tagsparsertypename-syntax*
TagsParserTypeName	The type names in the tag window match this syntax
			type.  The default highlighting for this type matches
			the Special highlighting group. >
	hi link TagsParserTypeName Special
<
					*tagsparserfoldmarker*
					*tagsparserfoldmarker-syntax*
TagsParserFoldMarker	The fold markers in the tag window match this syntax
			type.  The default highlighting for this type matches
			the Ignore highlighting group. >
	hi link TagsParserFoldMarker Ignore
<
					*tagsparserhighlight*
					*tagsparserhighlight-syntax*
TagsParserHighlight	The selected tag in the tag window match this syntax
			type.  The default highlighting for this type matches
			the ToDo highlighting group. >
	hi link TagsParserFoldMarker ToDo
<
==============================================================================
11. Tag Window Commands			*tagsparser-tagwindow-commands*

					*:tagsparsertoggle*
:TagsParserToggle	This command is used to open or close the tags window.
			If the tag window is open it will be closed, if it is
			closed, the window will be opened.  As described in
			|tagsparser-tagwindow-usage| if the
			|TagsParserAutoOpenClose| flag is set and the tag
			window is manually closed (with :TagsParserToggle,
			|:q|, or similar command) the flag will be turned off
			temporarily until the tag window is manually opened
			again via the :TagsParserToggle command.

			This is done to prevent the window from being auto
			opened when it is unwanted.  This allows you to easily
			turn off the auto-open behavior during a vim session.

					*<leader>t<space>*
<leader>t<space>	This is the default mapping installed which will call
			the |:TagsParserToggle| command.

					*:tagsparsercbot*
:TagsParserCBot		This command is used to open up a quickfix window
			(unconditionally) along the same lines as the regular
			|:copen| command.  It will open up a full sized window
			split horizontally below all currently opened windows,
			and then jump to the first error (if there are any).

					*<leader>tbo*
<leader>tbo		This is the default mapping installed which will call
			the |:TagsParserCBot| command.

					*:tagsparsercbotwin*
:TagsParserCBotWin	This command is used to open up a quickfix window along
			the same lines as the regular |:cwindow| command.  It
			will open up a full sized window split horizontally
			below all currently opened windows, and then jump to
			the first error (if there are any).

					*<leader>tbw*
<leader>tbw		This is the default mapping installed which will call
			the |:TagsParserCBotWin| command.

					*:tagsparsercopen*
:TagsParserCOpen	This command is used to open up a quickfix window
			(unconditionally) along the same lines as the regular
			|:copen| command.  It will open up a single pane sized
			window split horizontally below the currently opened
			(and active) file, and then jump to the first error (if
			there are any).

					*<leader>to*
<leader>to		This is the default mapping installed which will call
			the |:TagsParserCOpen| command.

					*:tagsparsercwindow*
:TagsParserCWindow	This command is used to open up a quickfix window along
			the same lines as the regular |:cwindow| command.  It
			will open up a single pane sized window split
			horizontally below the currently opened (and active)
			file, and then jump to the first error (if there are
			any).

					*<leader>tw*
<leader>tw		This is the default mapping installed which will call
			the |:TagsParserCWindow| command.

==============================================================================
12. Depreciated Options			*tagsparser-depreciated-options*

					*tagsparserfindprogram*
TagsParserFindProgram	This variable is depreciated and no longer needed.
			It used to be used for defining where the gnu-style 
			find program was located, but functionality that used 
			find has been moved to native vimscript.

					*mytagspath*
MyTagsPath		This variable is depreciated, the |TagsParserTagsPath|
			variable should be used now instead.  There were 
			problems caused by using a space separated path 
			variable such as attempting to tag a directory that 
			contained names with spaces in it.  So the new path 
			style uses a Vim-style comma separated path.  See 
			|path| for more information on Vim-style paths.

==============================================================================
13. Known Issues			*tagsparser-issues*
					*tagsparser-issues-1*
- If you edit a file and don't save it, tag selection through the tag window
will be inaccurate, and the current tag highlighting will most likely not be
able to locate the tag related to the current cursor position.  This is
because I currently use line numbers from the tag file to verify a match.
This is the method used for the TagsParser plugin to locate a tag because many
files will have tags that are named the same, and even possibly are defined on
a line which looks the same, for example local variables and overloaded
functions.

					*tagsparser-issues-2*
- If there is a tag which in reality takes up a range of lines (such as a
function) the |TagsParserHighlightCurrentTag| option still won't be able to
determine which tag the cursor is in unless the cursor is on the exact line
that ctags uses as the line that the tag is defined on.  That means for a
function defined as (line numbers inserted for clarity): >

	1 int main(int argc, char *argv[])
	2 {
	3     printf("Hello World!");
	4     return 0;
	5 }
<
unless you are on line 1 the TagsParser will not highlight a tag.  This is
because of limitations in the way that tags are defined by ctags.  Only the
line in which the tag is defined is stored.

					*tagsparser-issues-3*
- When a tag is selected manually through the Tag Window, there is no way to
push that onto the tag stack.  So the normal tag navigation method of ^T and 
^] won't work.  However, the cursor positions are marked so you can always jump 
to the previous position using '' (two single quotes).

					*tagsparser-issues-4*
- When you tag a directory of files using the |TagDir| command, the filetypes 
are not parsed first so any user defined overall Ctags options, or language 
specific options will not be used to parse the file the first time.  However, 
next time the file is saved (assuming it is in the |TagsParserTagsPath|), the 
proper options will be used.

					*tagsparser-issues-5*
- By default the Exuberant Ctags program does not deal well with spaces in tag 
file names.  This is because of how parameters are supplied to the external 
sort program.  Ctags uses an external sort by default (if it is available).  
For more information about this particular bug, and how to work around it, 
check out the |tagsparser-ctags-spaces| section.
					
==============================================================================
14. Changelog				*tagsparser-changelog*

0.4 - First bugfix release - 06/11/2006

06/11/2006 - Cleaned up help file.
06/09/2006 - Added some GCOV extensions (*.da, *.bb, *.bbg, *.gcov) to file
             exclude pattern.
06/09/2006 - Added GNAT build artifact extension (*.ali) to file exclude
             pattern.
06/09/2006 - Fixed some spelling errors in messages and comments.
06/09/2006 - Added standard library extensions (*.a, *.so) to file exclude
             pattern.
06/09/2006 - Changed include/exclude regular expressions into Vim regexps 
             instead of Perl regexps.
06/08/2006 - Fixed issues with spaces in paths (mostly of... The root of it
             is when Ctags is using The external sort... at least on Win32).
06/08/2006 - Fixed issue where tag files are created for directory names 
             when using The TagDir command.
06/02/2006 - Added Copyright notice.
06/02/2006 - Fixed tag naming issue where if you have 
	     TagsParserCtagsOptions_{filetype} options defined, it messes up 
	     The name of The tag file.
05/26/2006 - Added nospell to local TagWindow options for Vim 7.

0.3 - Initial Public Release - 05/07/2006

==============================================================================
15. Todo List				*tagsparser-todo*

- Move Perl code to native Vimscript for those who use version 7 Vim  
  (dependence on external find program already removed).
- Make tab pages play nicely with the Tag Window.
- Allow the definition of separate tag paths depending on the current working 
  directory.  Useful for working on large multiple projects.
- Read in a file when running a |TagDir| command so that the correct user 
  options are used to tag the file with.

==============================================================================
 vim:tw=78:ts=8:sts=8:sw=8:noet:ft=help:fo=twa21
